<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
using System;
using System.Linq.Expressions;

namespace ExpressionCompiler
{
	public static class Extensions
	{
<#
	for (int i = 1; i <= 5; i++)
	{
#>
		public static Func<<#= GetGenericParamsR(i) #>> Compile<<#= GetGenericParamsR(i) #>>(this Expression<Func<<#= GetGenericParamsR(i) #>>> expression)
		{
			var d = ExpressionCompiler.Compile( (LambdaExpression)expression );
			return (<#= GetParams(i-1) #>) => (TResult)d.DynamicInvoke(<#= GetParams(i-1) #>);
		}
		
<#
	}
#>
<#
	for (int i = 1; i <= 4; i++)
	{
#>
		public static Action<<#= GetGenericParams(i) #>> Compile<<#= GetGenericParams(i) #>>(this Expression<Action<<#= GetGenericParams(i) #>>> expression)
		{
			var d = ExpressionCompiler.Compile( (LambdaExpression)expression );
			return (<#= GetParams(i) #>) => d.DynamicInvoke(<#= GetParams(i) #>);
		}
		
<#
	}
#>
	}
}
 
<#+
string GetGenericParamsR(int number)
{
	return string.Join(", ", Enumerable.Range(1,number-1).Select(n=>"T" + n).Union(new[]{"TResult"}) );
}

string GetGenericParams(int number)
{
	return string.Join(", ", Enumerable.Range(1,number).Select(n=>"T" + n) );
}

string GetParams(int number)
{
	return string.Join(", ", Enumerable.Range(1,number).Select(n=>"p" + n) );
}
#>