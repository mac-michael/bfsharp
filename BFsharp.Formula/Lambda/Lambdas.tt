<#@ template language="C#v3.5" #>
<#@ output extension= ".cs" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
using System;
using System.Linq.Expressions;
#if PHONE
using ExpressionCompiler;
#endif

namespace BFsharp.Formula
{
<#	
	int count = 4;
	for(int i=1; i<count; i++)
	{
#>
	public partial class Lambda<#=GetGenericParams(i,false) #>
    {		
		internal Lambda(LambdaTypeDefinition definition, FormulaCompiler compiler)
		{
			Definition = definition;
			Compiler = compiler;
		}
        private LambdaTypeDefinition Definition { get; set; }
        private FormulaCompiler Compiler { get; set; }

        public Lambda<#=GetGenericParams(i,true) #> WithParam<T>(string paramName)
        {
			Definition.Params.Add( new Param(typeof(T), paramName ) );
            return new Lambda<#=GetGenericParams(i,true) #>(Definition, Compiler);
        }

        public CompilableLambda<#=GetGenericParams(i,true) #> Returns<T>()
        {
			Definition.ReturnedType = typeof(T);
            return new CompilableLambda<#=GetGenericParams(i,true) #>(Definition, Compiler);
        }
    }
<#
	}	
	for(int i=1; i<count+2; i++)
	{
#>
    public class CompilableLambda<#=GetGenericParams(i,false) #>
    {
		internal CompilableLambda(LambdaTypeDefinition definition, FormulaCompiler compiler)
		{
			Definition = definition;
			Compiler = compiler;
		}
        private LambdaTypeDefinition Definition { get; set; }
        private FormulaCompiler Compiler { get; set; }

        public Func<#=GetGenericParams(i,false) #> Compile(string formula)
        {
            var ex = CompileToExpression(formula);
			
			return ex != null ? ex.Compile() : null;
        }
        
        public Expression<Func<#=GetGenericParams(i,false) #>> CompileToExpression(string formula)
        {
            return Compiler.CompileToExpression<Func<#=GetGenericParams(i,false) #>>(formula, Definition);
        }
        
    }
    
<#
	}
#>
}
<#+
	public string GetGenericParams(int count, bool extended)
	{
		var list = (from n in Enumerable.Range(1, count)
					select "T" + n).ToList();
		
		if (extended) list.Add("T");			
		
		string t = string.Join(",",list.ToArray());
		if (t.Length > 0)
			t = "<" + t + ">";
		return t;
	}
#>