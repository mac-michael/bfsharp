<#@ template language="C#v3.5" #>
<#@ output extension= ".cs" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
using System;
using System.Collections.Generic;

namespace BFsharp.Formula
{
<#	
	int count = 4;
	for(int i=1; i<=count; i++)
	{
#>
    public class MethodCallProvider<#=GetGenericParams(i) #> : CallProviderBase
    {
        private readonly Method _method;

        public MethodCallProvider(string name, Func<#=GetGenericParams(i) #> method)
        {
            _method = new Method(method.Method);
            _method.Name = name;
        }

        protected override IEnumerable<Method> GetMethods(Type type)
        {
            if (type == null)
                yield return _method;
        }
    }
    
    public partial class FormulaCompiler
    {
		public FormulaCompiler WithMethod<#=GetGenericParams(i) #>(string name, Func<#=GetGenericParams(i) #> method)
        {
            return With(new MethodCallProvider<#=GetGenericParams(i) #>(name, method));
        }
    }
    
<#
	}
#>
}
<#+
	public string GetGenericParams(int count)
	{
		var list = (from n in Enumerable.Range(1, count)
					select "T" + n).ToList();
		
		string t = string.Join(",",list.ToArray());
		if (t.Length > 0)
			t = "<" + t + ">";
		return t;
	}
#>