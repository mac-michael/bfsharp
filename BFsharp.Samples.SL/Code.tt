<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>

using System;

namespace BFsharp.Samples.SL
{
	internal class Code
	{
<#
	var dir = Host.ResolvePath("Samples");
	
	foreach(var f in GetFiles(dir))
	{
#>
		public const string <#= Path.GetFileNameWithoutExtension(f) #> = @"<#= GetFileCode(f) #>";
<#
	}
	
#>
	}
}
<#+
IEnumerable<string> GetFiles(string dir)
{
	foreach( var f in Directory.GetFiles(dir, "*.cs") )
		yield return f;

	foreach( var d in Directory.GetDirectories(dir) )
		foreach( var f in GetFiles(d) )
			yield return f;
}

string GetFileCode(string path)
{
	var text = File.ReadAllText(path);
	
	int pos = text.IndexOf( "#region Code" );
	if ( pos >= 0 )
	{
		pos += "#region Code".Length;
		int pos2 = text.IndexOf( "#endregion", pos );
		text = text.Substring( pos, pos2-pos);

		text = TrimBlock(text);
	}
	else
	{
		text = text.Substring( text.IndexOf("{")+1 );

		text = TrimBlock(text);
	}

	return text.Replace("\"", "\"\"");
}

private string TrimBlock(string text)
{
	int trimLength = text.Select((x,n)=>new{x, n}).First(c=>!char.IsWhiteSpace(c.x)).n;
	int lastIndex = text.Take(trimLength).Select((x,n)=>new{x, n}).Last(c=>c.x=='\n').n+1;
	trimLength = trimLength- lastIndex;
	StringReader r = new StringReader(text);
	var b = new System.Text.StringBuilder();

	string line = r.ReadLine();
	while( line != null )
	{
		if ( line.Length >= trimLength)
			line = line.Substring(trimLength);
		else
			line = "";

		b.AppendLine(line);
		line = r.ReadLine();
	}		

	text = b.ToString();
	text = text.TrimStart().TrimEnd();

	return text;
}
#>